---
layout: post
title:  "jemalloc 探索"
date:   2025-06-30 15:32:00 +0800
---

## 基本概念

基于jemalloc 5.3 <https://github.com/facebook/jemalloc>  (was jemalloc/jemalloc before)

**arena**: 管理自己的extents，每个线程绑定到固定的arena。Arena之间相互独立，隔离锁竞争。

**extent**: 从OS分配到的大块内存，是若干个page的内存段。或者用于划分成多个small size class，此时叫slab，或者用于单个large size class的分配。 

**slab**: 对用于small size class的extent的称呼。大小根据所属size class是固定的，里面划分成size class大小的对象，叫region，也就是一个slab的region个数是固定的。

**bin**: 在arena用于管理small size class的slabs，每个size class一个。

**size class**: 
 * size 的值域划分为一系列group，group的边界是2的幂, 比如64 / 128 / 256 , 每个group的大小就等于group起点`base`, group等分为`SC_NGROUP`个delta。
 * "Small" size classes mean those that are allocated out of bins, which is the same as those that are slab allocated.
 * "Large" size classes are those that are not small. The cutoff for counting as large is page size * group size.
 * `SC_NGROUP`的值: 4  每个group分为4个delta。
 * delta大小到了page size时，改称large size class，这个边界就是 `4KB * 4 = 16KB`。之前的称为small size class。
 * 总共36个small size class, 64前的是特别的, 8 / 16 / 32 / 48 。所以有36个bin (`NBINS`) 。

**slab size**:
 * By default, we pick slab sizes to be the smallest number of pages that don't result in any wasted space due to not dividing evenly into the object size (e.g. 48 byte slabs get 3 pages, while 32 and 64 byte slabs only get 1 page). <https://github.com/jemalloc/jemalloc/issues/1959>
 * stats 里面每个 bin 有 regs 和 pgs 字段,是这个 size class 的 slab 的 region 个数和 page 数。
 * 未公开的 `slab_sizes` 配置，格式: `<size class reg_size range, in [start-end]>:pages`, 比如: `MALLOC_CONF="slab_sizes:1-4096:17|100-200:1|128-128:2"`
 * slab的 region 个数上限: `SC_SLAB_MAXREGS` `= 4KB / 8 = 512` , 这是 slab 的 bitmap 的容量。

**purge/decay/muzzy**: purge空闲内存释放， decay是平滑释放速率，muzzy是2阶段purge: `MADV_FREE`(让OS按需回收物理page) 和 `MADV_DONTNEED` (直接释放物理page) 。

## 理解jemalloc stats

参考: <https://jemalloc.net/jemalloc.3.html> , 但里面信息有限，不好理解。

stats可以调用 `malloc_stats_print` 函数打印。

一个metadata异常大的样例:
```
Allocated: 4247731792, active: 5271875584, metadata: 12697068816 (n_thp 0), resident: 19609395200, 

arena merged total: 
active:                    5271875584
mapped:                 21568036864
retained:                533735792640
base:                     12686681360
internal:                 10387456
metadata_thp:                       0
tcache_bytes:                72177928
tcache_stashed_bytes:               0
resident:                 19609395200
```

* **allocated**: 应用实际分配的
* **active**: >= allocated, page粒度的实际分配的。不包含metadata。
* **metadata**: jemalloc元数据用的, 包括base 和 internal。
* **resident**: 相比active这个包含了metadata。
* **mapped**: 
* **retained**: 


